from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
import pandas as pd
import streamlit as st

st.title("üçå ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Naive Bayes")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Banana
df = pd.read_csv("./data/banana_quality.csv")

# ‡πÅ‡∏Å‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô b'xxx' ‚Üí string ‡∏õ‡∏Å‡∏ï‡∏¥
df['Quality'] = df['Quality'].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)

# Features ‡πÅ‡∏•‡∏∞ Target
X = df.drop('Quality', axis=1)
y = df['Quality']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Naive Bayes
clf = GaussianNB()
clf.fit(X_train, y_train)

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
st.subheader("üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
st.write(df.head())

# Input ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
st.subheader("‚úçÔ∏è ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
size = st.number_input('Size', value=0.0)
weight = st.number_input('Weight', value=0.0)
sweetness = st.number_input('Sweetness', value=0.0)
softness = st.number_input('Softness', value=0.0)
harvest = st.number_input('HarvestTime', value=0.0)
ripeness = st.number_input('Ripeness', value=0.0)
acidity = st.number_input('Acidity', value=0.0)

# ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
if st.button("‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå"):
    x_input = [[size, weight, sweetness, softness, harvest, ripeness, acidity]]
    y_pred = clf.predict(x_input)
    st.write("üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∑‡∏≠:", y_pred[0])

    if y_pred[0] == "Good":
        st.success("‚úÖ ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ")
    else:
        st.error("‚ùå ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏î‡∏µ")
else:
    st.info("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")

# ‡πÅ‡∏™‡∏î‡∏á Accuracy ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
st.subheader("üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
acc = clf.score(X_test, y_test)
st.write(f"Accuracy: {acc:.2f}")
